#!/usr/bin/env ruby

require 'rubygems'
require 'main'
require 'yaml/store'
require 'etc'
require 'pathname'
require 'logger'

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib preen]))

Main do
  PREEN_DIR = Pathname(ENV['HOME'] || Etc.getpwent.dir) + '.preen'
  DATA_FILE = PREEN_DIR + 'preen.dat'

  def with_store_and_log
    log = Logger.new($stdout)
    log.level = params[:verbose].value ? Logger::INFO : Logger::WARN

    PREEN_DIR.mkpath
    store = YAML::Store.new(DATA_FILE.to_s)
    store.transaction do |store|
      yield(store, log)
    end
  end

  def with_environment
    # HACK Ugly, but necessary for full-stack testability
    ::Pingfm.instance_eval do remove_const(:API_URL) end
    ::Pingfm.const_set(:API_URL, params['PINGFM_URL'].value)

    with_store_and_log do |store, log|
      yield(store, log)
    end
  end

  def application(store, log)
    microblog = Preen::PingFm.new(store.fetch('pingfm-key'), log)
    news_site = Preen::Reddit.new(params['REDDIT_URL'].value, log)
    Preen::Application.new(store, log, news_site, microblog)
  end

  # For testing purposes
  environment('REDDIT_URL') do
    default 'http://www.reddit.com/r/programming/new?sort=new'
  end
  environment('PINGFM_URL') do
    default 'http://api.ping.fm/v1'
  end

  option('verbose') do
    cast :bool
  end

  mode 'init' do
    option('pingfm-key') do
      required
      argument_required
      description 'Ping.fm User App Key (http://ping.fm/key/)'
    end

    option('url-pattern') do
      required
      argument_required
      description 'The URL pattern for which to scan Reddit'
      cast lambda {|pattern|  Regexp.new(Regexp.escape(pattern))}
    end

    def run
      with_environment do |store, log|
        Preen::Application.new(store, log).init!(params)
      end
    end
  end

  mode 'info' do
    def run
      with_environment do |store, log|
        puts application(store, log).formatted_info
      end
    end
  end

  mode 'scan' do
    def run
      with_environment do |store, log|
        application(store, log).scan!
      end
    end
  end
end

# EOF
